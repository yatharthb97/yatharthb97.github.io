[{"content":"How natural selection took over immunology by Jorge Carneiro ​\nRead: Clonal selection theory.\nIf an organism is infected, it produces antibodies.\nThe body has antibodies for even artificial synthestic novel foreign bodies when injected.\nAntigens + Antibody results in a precipitation reaction.\nElectrophorosis of Serum Globulin, Sanger Sequencing.\nUltra-centrifugation of antibody precipitation to differentiate IGG and IGM.\nCriticisms of the Pauling approach where the Globulin changes conformation and wraps around the threat fails to explain the exponential growth observed in the concentration of antibodies over time.\nSkin grafting was a hot field after war. The rejection of foreign tissue was well known. If the same person is given the same tissue a second time it rejects is faster. This indicated an immuological response.\nIf in embroyonic life, foreign cells are introduced, then the body develops no immunological response to it. This is not entirely true, as only some particular type of tissues work this way.\nSelf-on-self-discrimination: the immune system discriminates between the tissues of its own body vs foreign objects.\nThe natural selection theory of Antibody Formation by Jesse.\nGenes and Antibodies by Joshua Lederberg.\nPAMP: Pathogen Associated Molecular Patterns.\nRecommendation for immunology Textbook: Janeway´s Immunobiology.\nDrosophilia and Beyond: Experimental Systems in Genetics by Michael Dietrich The designation of the \u0026ldquo;model organis1m\u0026rdquo; was given to a set of organisms by the Human Genome Project in 1990. How did the fly become such a dominant model organism in research? Science is produced locally, but it transmits globally. Universality: an idea of the epistemic validity of Science Locality:c science is influences by its local conditions of production Globally: the circulation of scientific knowledge, materials, and practices from one location to other. Thomas Hunt Morgan, American was responsible for coming up with Drosophilia model systems. Morgan get the Nobel Prize for \u0026ldquo;The Mechanisms of Mendelian Heridity\u0026rdquo;. He inbred flies in the lab in a bio-reactor to amplify rare mutations. The first mutant he discovered was controlling the eye color of the fly. He also found that mutations co-occur. So you can put mutations into discrete groups based on co-occurance. Chromosomes can cross over which results in recombination of genes. Recombination rates can be used as a measure of proximity. From this methotend to kill you, its d they were able to create a linear photo-map of the genes. This gets the PI a nobel prize. This also cements the Chromosome-gene theory for genetics. Gene is the unit of Structure, Function, Recombination, and Mutation. Morgan runs a tight ship of the Boss and the Bois. Chromosomes are proteins + DNA. Its Nucleoproteins. H.J. muller invents the Balanced Lethal Assay. He was able to show that their is a linear relationship between X-ray dosage and the amount of mutations. He got the nobel prize for this. Mammalian Genetics \u0026ldquo;Got a weird mouse? Kill it and ship it to Harvard!\u0026rdquo;\nThe process and hence the research is much slower.\nSeawell Wright works extensively on Gunnie pigs.\nBecause mutations in development tend to kill you, they are difficult to detect.\nMammal and maize geneticists were interested in variable phenotypes.\nThe variability of phenotypes and their mixtures can be explained by bringing time into picture. It is the temporal dependece of certain genes.\nGoldsmith and the Production of Intersexes in Lymantira disper (Gypsy Moths) Conclusions The locus of univerality in Biology is the genetic code. Nothing else is universal in any way. Organisms evolve over time in complex ways to produce very distinct organismic systems. Genes in Action: The history of Development and genetics by Michael Dietrich Thomas Hunt Morgan was trained as an embryologist (a developmental biologist) but didnt adress problems from this field, ever!\nWilhelm Roux develops developmental mechanics and really likes experiments. \u0026ldquo;There are particles that determine the type of cell that develops.\u0026rdquo;\nWhere (and what) is the determinant of Development?\nJacques Loeb advocates the Reductionist Approach. He also thinks that Genes as Protein and Gene actions are enzyme Actions.\nRichard Goldschmidth (color blind Gypsy moth guy) was trained with the German Morphological tradition: which is highly descriptive biology.\nTemporal Regulation: how much you produce something and when you produce something are both crucial factors.\nLinking Genes and Development can be attributed to Viktor Hamburger and Walter Landauer who were German exiles.\nThe dorsal fold plays an important role during embryonic development (Spealman and Mar\u0026hellip;) It acts as an organiser of the cell.\nDead cells in the dorsal fold (in the organiser) also work. Hence, it was induced that the organiser is actually a chemical signal released by the dorsal fold area.\nDevelopment is seen as a phenomena that operates around t a network of chemical inducers that are responsible for producing different kinds of tissues. \u0026ldquo;A cascade of inducers.\u0026rdquo;\nNon-competent cells are not ready to receive a signal. Hence, time becomes important. It is also noteworthy that early developmental biologists thought that genes were not responsible for these \u0026ldquo;particles\u0026rdquo; (inducers), are purely chemical in nature. The question of the first inducer is still open.\nEmbronic development starts with making a normal table of development for a particular system.\nHomeotic Mutant: has a full body part where it was not supposed to be.\nWaddington´s Branching track Model for Aristapedia (which is a fly).\nWaddington is able to map variable pheontypes using the branch track model.\nWaddington´s cannalization theory with different developmental channels. Remember the dynamical attractors in ecology paper (PNAS).\nGeorge Beadle, Ed Tatum : the birth of Biochemical Genetics. The use Neurospra (bread mould).\nThey come up with the one-gene one-enzyme model. This creates biomedical genetics. You can now say: \u0026ldquo;This gene is responsible for this broken metabolic process.\u0026rdquo;\nflowchart LR Gene -.\"+\".- Nutrients --\u003e Proteins Proteins --Histogenesis --\u003e Cells Cells --Morphogenesis--\u003eOrganisms \u0026ldquo;Never trust a Biologist about their histories.\u0026rdquo;\nBacteria-Phage Radioactive tagging experiment that determines that DNA is being transfered a sthe genetic code.\nBetter than Darwin: The Rise of the Evolutionary Synthesis by Michael Dietrich Population Genetics: focus on population measure and its statistics. founded by J.B.S Haldane, Seawall Wright, and Fisher.\nHardy-Weinberg Principle $$ p^2 + 2pq + q^2 = 1 $$\n$p^2$ is the frequency of AA $2pq$ is the frequency of Aa $q^2$ is the frequency of aa, A, a are alleales. There are forces than increase variability and those that decrease variability.\nSampling can drastically change the genetic makeup of the population, for example, 1 single sperm is sampled from millions during reproduction.\nA fitness landscape that can be topologically represented superimposes an infinite hypercube of the genotype network. All the organisms navigate this changing topological landscape.\nPeak Shift Problem\nSpecies and Ring Species: different clusters of the birds look like a neighbouring cluster but clusters far away look very different. The clusters are loosely isolated geographically.\ngraph LR Geographic-Isolation--\u003eGenetic-Isolation--\u003eReproductive-Isolation--\u003eSpeciation The Great Evolutionary Constriction was the ruling out of certain ideas about Evolutionary Synthesis but no concensus was obtained.\nRead about Homozygous or heterozygous.\nThe classical/Balance Controversy: which lead to global nuclear policy.\nGenetic Variation: a wild sample is more Homozygous or Heterozygous? The Action of Selection: Is natural selection most often purifying or balancing? Radiation Eugenics Hybrid Vigour: 1 single sickle cell alleale gives resistance to malaria.\nBruce Wallace and King did experiments with D flies, where you expose low power chronic vs high power chronic radiation. The adaptive value (or number of offsprings) was 0.92, 0.95 and 1.04 respectively.\nYou can\u0026rsquo;t reproduce this experiment as only the exposure can be reproduced not the random mutations.\nRadiation exposure and population fitnes was very difficult to quantify.\nElectrophorosis: seperation of molecules based on size and charge. Lewontin and Hubby (1966) used this method to seperate the genetic matter. This allowed for a quantitative measure of the variability in species.\nThe average individual in a population was heterozygous for 8% to 15%, the avaerage being 12%.\nElectrophorosis becomes a trend. Because it was fast.\nNeutal theory: most mutations are neutral and don\u0026rsquo;t affect the organism\u0026rsquo;s fitness.\nSequence revolution: a lot of variability in the clones.\nNeutral Theory is the new Null Model. Assume neutrality unil disproven by a statistical test.\nNational Museum of Creationism in Connecticut - Sex, Drugs, and Rock and roll is the path to sin.\nReviving the Hopeful Monster: Richard Goldschmidt and Saltational Evolution by Michael Dietrich Richard Goldschmidt, German, was part of the Kieser Wilhelm Institute which is today\u0026rsquo;s max Plank institutes. He then moves to Berkely. Sturtevant discovered that if genes are close to each other (neighbours) they affect each other. It is called the Position Effect. Goldschmidt\u0026rsquo;s presents the Genetic Hierarchy which states that the genes can be grouped from single gene, to gene clusters, to whole chromosoms. The different cardinal groups can transporf and transform in an affine manner. In his book, The Material Basis of Evolution (1940), he introduces the concept of Gradual vs Saltation rates of evolution. Which morphs into Microevolution and Macroevolution. There are Systemaic mutations, which are Chromosal emphasis. And there are Regulatory Mutations which have a Developmental emphasis. ","permalink":"https://yatharthb97.github.io/classnotes/how-natural-selection-took-over-immunology/","summary":"How natural selection took over immunology by Jorge Carneiro ​\nRead: Clonal selection theory.\nIf an organism is infected, it produces antibodies.\nThe body has antibodies for even artificial synthestic novel foreign bodies when injected.\nAntigens + Antibody results in a precipitation reaction.\nElectrophorosis of Serum Globulin, Sanger Sequencing.\nUltra-centrifugation of antibody precipitation to differentiate IGG and IGM.\nCriticisms of the Pauling approach where the Globulin changes conformation and wraps around the threat fails to explain the exponential growth observed in the concentration of antibodies over time.","title":"HISTORY OF BIOLOGICAL CONCEPTS: lectures"},{"content":"Transcription Networks - Basic Concepts The cell continuously monitors its environment and calculates the amount of each protein that is needed. The rate of production is controlled by transcription networks.\nTo represent environmental states, cells use special proteins called transcription factors as symbols. Transcription factors are molecules that can rapidly switch between active and inactive molecular states, with rates determined by environmental factors. Transcription factors bind to DNA and regulate read-rate of genes. Transcription factors regulate their target genes to mobilize the appropriate protein response in each case. flowchart LR genes --transcribed--\u003e mRNA --translated--\u003e proteins; proteins--modify--\u003eenvironment; environment --what?--\u003e genes E. coli: has an internal representation of about 300 degrees of freedom. Hence, it has 300 transcription factors.\nTranscription Network Model Gene: a stretch of DNA whose sequence encodes the information needed for production of a protein. Transcription: Gene is copied into a disposable mRNA molecule by RNA polymerase (RNAp). Promoter: The number of mRNA produced per unit time is controlled by a regulatory region of DNA that precedes the gene which is called promoter. It regulates the chemical affinity of the DNA to mRNA (opposite is a Repressor). Transcription factors can act as both: activators and repressors. Transcription factor proteins are themselves regulated by other transcription factors. flowchart LR; Gene-- copied by RNAp into --\u003e mRNA .- transcription; mRNA -- translated to --\u003e Protein .- translation; Representation of Network Nodes \u0026amp; Edges x → Y : Product of genes X is a promoter for the transcription of gene Y. X ⟞ Y : Product of genes X is a repressor for the transcription of gene Y. Mechanism of Transcription Networks The input of transcription factor network are signals. Each signal is a small molecule, protein modification or molecular partner that directly affects the activity of one of the transcription factors.\nThe signal usually causes physical changes in the shape of the TF protein - active molecular state.\nMajority of the proteins are not transcription factors, rather they are building blocks or catalysts.\nSeparation of Timescales:\nProcess Timescale Input Signal changes Transcription Factor ~msec Binding of active Transcription Factor to DNA equilibration ~sec Transcription and Translation of the target genes ~minutes Accumulation of the Protein Product ~hours Hence, when considering network dynamics of protein levels, the transcription factor activity levels can be considered to be in steady state.\nTranscription networks are extremely modular in nature. (GFP from jellyfish) is widely used in experiments. Promoter of effect A + Gene of effect B → mechanism that causes a when B is true. Promoters and genes are generally interchangeable. This fact also means that these networks can evolve rapidly.\nThe arrows in the transcription network evolve on a much faster timescale than the coding regions of the genes (time scale of many generations).\nEach transcription factor acts primarily in one mode for its target genes, as either an activator or repressor. However, the input mode of regulation [of a gene] is often mixed.\nInput Functions The strength of the effect of a transcription factor on a target gene is escribed by an input function.\nX regulates Y : the number of molecules of protein Y produced per unit time is a function of the concentration of X in its active form $X^{*}$.\nRate of production $Y = f(X^*)$.\nA useful function that realistically describes many gene input functions is called the Hill function. $$ f(X^*) = \\beta\\frac{X^{*n}}{\\Kappa^{n} + X^{*n}} $$\nK : activation coefficient, which has units of concentration. It defines the concentration of active X needed to significantly activate expression.\n$X^* = K$ : half-maximal expression.\n$K$ is mainly determined by the chemical affinity between $X$ and its binding site on the promoter.\n$\\beta$ : maximal promoter activity. It is reached when $X^* \\gg K$.\nThe Hill Coefficient $n$ determines the steepness of the input function. For larger n, the function is more step-like.\nUsually, input functions are moderately steep: n=1-4.\nFor a repressor, the hill function is a decreasing function.\nHence, each arrow in the network can be thought to carry at least three numbers: $\\beta, K, n$. These numbers can be readily tuned during evolution.\n$K$ : Can be varied if the position of the binding site is changed. $\\beta$ : can be tuned by the mutations in the RNAp binding site. Laboratory evolution experiments show that when placed in a new environment, bacteria can accurately tune these numbers within several hundred generations to reach optimal expression levels. Thus, these numbers are under selection pressure and can heritably change over many generations if environments change.\nMany genes have a nonzero minimal expression level, called the gene\u0026rsquo;s basal expression level. It can be described by adding a $\\beta_0$ term.\nThe essence of the input functio n is a transition between low and high values, with a characteristic threshold $K$.\nWe can hence approximate the input function with a logic approximation. It can be expressed as : $f(X^{ * }) = \\beta\\theta(X^{ * }\u0026gt; K)$. It is equivalent to a Hill function with $n \\rightarrow \\infty$.\nFor a repressor: $f(X^{ * }) = \\beta \\theta(X^{ * } \u0026lt; K)$ .\nMulti-dimensional input functions:\n$f(X^{ * }, Y^{ * }) = \\beta\\theta(X^{ * } \u0026gt; K_x)\\theta(Y^{ * }\u0026gt; K_y)$ ~ X AND Y $f(X^{ * }, Y^{ * } ) = \\beta\\theta(X^{ * } \u0026gt; K_x + Y^* \u0026gt; K_y)$ ~ X OR Y SUM input function: $f(X^{ * }, Y^{ * }) = \\beta_xX^{ * }+ \\beta_yY^{ * }$. More complex functions with many inputs\u0026hellip; Dynamics \u0026amp; Response Time $$ X + S_x \\rightarrow X^{} \\ X^ \\rightarrow P_y + mRNA \\rightarrow Protein_Y $$\n$S_x$ is the activation signal for $X$. $P_y$ is a promoter of gene $Y$.\nThe concentration of a protein in a cell is regulated by two processes: degradation ($\\alpha_{deg}$) and dillution ($\\alpha_dil{}$). The total removaal rate is hence: $\\alpha = \\alpha_{dil} + \\alpha_{deg}$. This gives us the the following dynamic equation of the concentration of a protein Y: $dY/dt = \\beta + \\alpha Y$. Solving this equation yields the steady state concentration of the protein as: $Y_{st} = \\beta / \\alpha$.\nThis is however a simplified model. The regulation of protein in reality happens at every step of the production. While the protein is contructed in cohesion with the mRNA, various micro-steps have their own regulatory mechanisms.\nResponse Time The response time is a measure of speed of a dynamical process. It is the time needed to reach halfway $T_{1/2}$ between the inital and the final levels in a dynamical process. For an example, if we assume that the protein production of Y has come to a halt. Hence, $\\beta = 0$. The dynamical equation then simplifies to: $$ Y(t) = Y_{st}e^{- \\alpha t} $$ Solving the above equation yields: $$ Y(t_{response}) = Y_{st} / 2 \\newline T_{1/2} = log(2) / \\alpha $$ This leads us to the following realisations:\nRemoval rate $\\alpha$ determines the response time. Fast removal allowes for rapid changes in the concentration of the protein. The production rate $\\beta$ determines the steady state concentration, but not the respone time. Proteins with big $\\alpha$ also need large $\\beta$ to sustain their steady state rates. This might seeem completely futile, but this tradeoff can be used for rapidy changing concentration of certain proteins. ","permalink":"https://yatharthb97.github.io/blog/biophy/urialonc1/","summary":"Transcription Networks - Basic Concepts The cell continuously monitors its environment and calculates the amount of each protein that is needed. The rate of production is controlled by transcription networks.\nTo represent environmental states, cells use special proteins called transcription factors as symbols. Transcription factors are molecules that can rapidly switch between active and inactive molecular states, with rates determined by environmental factors. Transcription factors bind to DNA and regulate read-rate of genes.","title":"Transcription Networks - Basic Concepts"},{"content":"Welcome to my website! Here, I post about stuff I like and the things I do. I { read, code, think, analyse, and solve } in all permutations. This website cum blog is an attempt to include writing in this set. Below is a short overview of the website.\nprojects: where I post about my scientific and coding projects. publications: lists all the articles I have written and published somewhere. blog: where I will post articles and notes on various themes. gallery: has some cool pictures of me and my work. about me: an overview of my interests \u0026amp; qualifications. collaborate: has a list of projects for which collaborators are required. This website is still being actively developed and is broken at a few places.\nPlease let me know what you think about this website and how I can improve it. You can connect through the various social media links on the home page.\nFor credits and source code, you can visit here.\nMeanwhile the world in which we exist has other aims. But it will pass away, burned up in the fire of its own hot passions, and from its ashes will spring a new and younger world, full of fresh hope, with the light of morning in its eyes.\nBertrand Russell ","permalink":"https://yatharthb97.github.io/blog/welcome/","summary":"Welcome to my website! Here, I post about stuff I like and the things I do. I { read, code, think, analyse, and solve } in all permutations. This website cum blog is an attempt to include writing in this set. Below is a short overview of the website.\nprojects: where I post about my scientific and coding projects. publications: lists all the articles I have written and published somewhere. blog: where I will post articles and notes on various themes.","title":"Welcome!"},{"content":"An Introduction to the Luria-Delbruck Experiment by Marco Fumasoni Introduction Salvatore Edoardo Luria from Turin, Italy \u0026amp; Max Ludwig Henning Delbruck from Berlin, Germany fled to the United States. Delbruck was a Physicist. Scientific background in the early 40s Genetic information is heritable. Due to DNA and DNA is genetic material. Evolution by inheritance of acquired characteristics natual selection by Darwin \u0026hellip; and modern synthesis The Problem: bacterial cultures rapidly develop resistance to viral infection H1: The virus directly induces resistance mutations. \u0026ldquo;The environment induces the mutations required for survival.\u0026rdquo;\nH2: Mutations arise spontaneously before virus exposure.\nTo resolve this disjunction, we have to use a quantitative approach.\nNote: CC refers to Colony Count\nflowchart LR Virus --infect--\u003eBacteria Bacteria --replicates--\u003eReplicas subgraph Replicas R1 -.- CC12((CC-12)) R2 -.- CC5((CC-5)) R3 -.- CC0((CC-0)) Rn -.- CCn((CC-n)) end Measuring mutation rates: Fluctuating numbers Have $n$ replicates, and do the experiment: what you get is fluctuating results. The colony counts fluctuates widely. Luria finds inspiration from a casino slot machine. Luria´s intuition: if the mutation happens early on, i.e. if the petri dish is \u0026ldquo;lucky\u0026rdquo;, you get a higher colony count, since more bacteria offsprings survive. Measuring mutation rates: distributions Mutation events [mutation number n per culture] follow a Poissonian curve. The L-R distribution derives the number of mutant cells. The model: S. Cerevisiae Genome size: 12.5 MB, #TODO The system Point mutation (uro3, CAN1)\nThe method is called Gross chromosomal rearrandement. The second leg of the experoiment will have Chromosomal loss.\nThe plan: Fluctuation vs quick and dirty\nWe use a 96 sample plate and do parallel platting events. An alternative is a 6 replica experiment. It allows use to reduce the number of replicas. It drastically reduces the number of experiments we need to do as we need to analyse multiple generations. Generational Fitness:\nBonus Clustered mutations look the same as early mutations: this situation is called un-determination. Single genes result in Mendelian diseases. Polygenic diseases depend on multiple genes. Experiment Controls ","permalink":"https://yatharthb97.github.io/classnotes/an-introduction-to-the-luria-delbruck-experiment/","summary":"An Introduction to the Luria-Delbruck Experiment by Marco Fumasoni Introduction Salvatore Edoardo Luria from Turin, Italy \u0026amp; Max Ludwig Henning Delbruck from Berlin, Germany fled to the United States. Delbruck was a Physicist. Scientific background in the early 40s Genetic information is heritable. Due to DNA and DNA is genetic material. Evolution by inheritance of acquired characteristics natual selection by Darwin \u0026hellip; and modern synthesis The Problem: bacterial cultures rapidly develop resistance to viral infection H1: The virus directly induces resistance mutations.","title":"An Introduction to the Luria-Delbruck Experiment"},{"content":"Safe and accurate parsinggit status of time literals (values + units) is both common and crucial requirement. While C++ has a mechanism through STL chrono, such a functionality is absent in python (as per my information).\nLibrary: GitHub Gist.\nWhat is a time-literal? Just to be clear, time literal here means anything of this form : 5ns, 4min, 15.5ms. It is a numeric value (float) followed by alphabetic constants that indicate special treatment of the alpha-numeric string constant. It is similar to the use of b while declaring bytes or using x while defining a hexadecimal integer:\nbinary = 0b10000 hexadecimal = 0x12f Since python does not natively support time-literals, it can be implemented by using python strings. Here is my attempt to do the same, and while we are at it, implement some additional features as well.\nHere is a rundown of the library: A value_pair is an entity of the following form: [float, TmLiteral]. The container should be a list. The first is the absolute numeric value and the second quantity is the units, which is represented by the TmLiteral object. value_pair is fundamental to this library, since strings are parsed into value pairs. All inter-conversions also apply to value pairs. For performing such operations, the literal must first be converted into a value_pair by using the TmParser object. To verify if the given entity is a valid value-pair:\nfrom tmliteral import * IsValuePair([4.2, FindTmL(\u0026#34;seconds\u0026#34;)]) #-\u0026gt; returns True IsValuePair([4.2, \u0026#34;seconds\u0026#34;]) #-\u0026gt; returns False Print all available pre-defined literals:\nimport tmliteral.time_table for tml in tmliteral.time_table: print(tml.abbr, \u0026#39; : \u0026#39;, tml) Output:\nxxx : invalid time value s : second Ys : yottasecond Zs : zettasecond Es : exasecond Ps : petasecond Ts : terasecond Gs : gigasecond Ms : megasecond ks : kilosecond hs : hectosecond das : decasecond ds : decisecond cs : centisecond ms : millisecond us : microsecond ns : nanosecond ps : picosecond fs : femtosecond as : attosecond zs : zeptosecond ys : yoctosecond min : minute h : hour d : day week : week year : calender year leapyear : calender leap year gregyear : gregorian calendar year julianyear : julian astronomical year Create a user defined literal or find a pre-defined literal:\n# Simulation unit which is equivalent to microseconds. sim_time = TmL(\u0026#34;sim\u0026#34;, -6, simulation unit) # TmL(abbr, exp, name, mul_factor=1.0) # Get a pre-defined time unit ms = FindTmL(\u0026#34;ms\u0026#34;) also_ms = FindTmL(\u0026#34;millisecond\u0026#34;) Parsing time literals from strings can be done by creating a parser object:\nparser = TmParser() parser.add_literal(sim_time) tm1 = parser.parse(\u0026#34;4.2fs\u0026#34;) # Out→ [4.2, \u0026lt; TmLiteral : femtosecond \u0026gt;] tm2 = parser[\u0026#34;4.2fs\u0026#34;] # Same tm_sim = parser[\u0026#34;5 sim\u0026#34;] # Out→ [5.0, \u0026lt; TmLiteral : simulation time \u0026gt;] Conversions between units (casting) can be handled by creating a cast object:\nns_cast = TmCast.Find(\u0026#34;ns\u0026#34;) # Make a nano-second cast time = parser[\u0026#34;5 ms\u0026#34;] ns_time = ns_cast.cast(time) # Returns 5000 ns_time2 = ns_cast[tm2] # Equivalent to `cast` member function. Using the TmAutoScale object, appropriate units can be selected automatically. The option tmparser in the initializer can be used to pass a custom TmParser object. The auto-scale object inherits the literal order of the parser object in the \u0026ldquo;default\u0026rdquo; mode. If this option is not specified, the auto-scaler constructs a new generic TmParser object.\nThis module is extremely useful with timing of processes and converts arbitrary time values in seconds (or nanoseconds) to more \u0026ldquo;human readable\u0026rdquo; units. The object can be constructed in a variety of mode:\n\u0026ldquo;default\u0026rdquo; : Does not modify the preference of literals which is inherited from a parser object. prefer_clock_units\u0026quot; : Prefers clock units over SI. clock units are [\u0026ldquo;second\u0026rdquo;, \u0026ldquo;minute\u0026rdquo;, \u0026ldquo;hour\u0026rdquo;, \u0026ldquo;day\u0026rdquo;, \u0026ldquo;week\u0026rdquo;, \u0026ldquo;calender year\u0026rdquo;] \u0026ldquo;prefer_SI_units\u0026rdquo; : Prefers SI units over clock units. \u0026ldquo;clock\u0026rdquo; : Only uses clock units \u0026ldquo;SI\u0026rdquo; : Only uses SI units \u0026ldquo;extended_process_timing\u0026rdquo; : Uses [\u0026ldquo;nanoseconds\u0026rdquo;, \u0026ldquo;microseconds\u0026rdquo;, \u0026ldquo;milliseconds\u0026rdquo;] + clock units. This is useful for timing of processes which requires \u0026ldquo;human-comprehensible units\u0026rdquo; on a power scale. tauto = TmAutoScale(mode=\u0026#34;prefer_clock_units\u0026#34;) tauto.scale(parser[\u0026#34;4e5 picoseconds\u0026#34;], set_scale=100) #-\u0026gt;[399.99999999999994, \u0026lt; TmLiteral : nanosecond \u0026gt;] tauto2 = TmAutoScale(mode=\u0026#34;prefer_clock_units\u0026#34;) tauto2[\u0026#34;5e7 seconds\u0026#34;] #-\u0026gt; [1.5854895991882294, \u0026lt; TmLiteral : calender year \u0026gt;] tauto2[\u0026#34;5e4 seconds\u0026#34;] #-\u0026gt;[0.5787037037037037, \u0026lt; TmLiteral : day \u0026gt;] To print a value_pair properly the function TmFormat can be used:\ntime1 = parser[\u0026#34;5 ms\u0026#34;] time2 = parser[\u0026#34;1 ns\u0026#34;] print(TmFormat(time1, format=\u0026#34;full\u0026#34;)) #-\u0026gt; 5.0 milliseconds print(TmFormat(time1, format=\u0026#34;abbr\u0026#34;)) #-\u0026gt; 5.0 ms print(TmFormat(time2, format=\u0026#34;full\u0026#34;)) #-\u0026gt; 1.0 nanosecond print(TmFormat(time2, format=\u0026#34;abbr\u0026#34;)) #-\u0026gt; 1.0 ns Now my favorite feature: the Expression Parser can perform arithmetic operations on time values that have any arbitrary units. Operations that are currently supported : {+, - , *, /, %}.\nexp = TmExpParser() print(exp.parse(\u0026#34;10ms + 5ns + 10ms\u0026#34;)) #-\u0026gt; [0.020000005, \u0026lt; TmLiteral : second \u0026gt;] I did not have a use-case in mind for this feature. But I am sure that somebody else can. Just did this for fun.\nI hope you find this library useful! Below is a view of the library:\n","permalink":"https://yatharthb97.github.io/projects/python-time-literals/","summary":"Safe and accurate parsinggit status of time literals (values + units) is both common and crucial requirement. While C++ has a mechanism through STL chrono, such a functionality is absent in python (as per my information).\nLibrary: GitHub Gist.\nWhat is a time-literal? Just to be clear, time literal here means anything of this form : 5ns, 4min, 15.5ms. It is a numeric value (float) followed by alphabetic constants that indicate special treatment of the alpha-numeric string constant.","title":"Python Time Literals"},{"content":"Authored \u0026amp; Illustrated 1 The Romanticism of the Nib\n2 A forgotten book: The Dramatic History of India\nIllustrated \u0026amp; Edited 3 Satire Saturdays: The Leak\n4 Satire Saturdays - Crocodile: An Extraordinary Incident\n5 Satire Saturdays: Cat\u0026rsquo;s Cradle\n6 Satire Saturdays: A Case of Exploding Mangoes\n7 Satire Saturdays: The Master and Margarita\n","permalink":"https://yatharthb97.github.io/publications/beetlebox/","summary":"Authored \u0026amp; Illustrated 1 The Romanticism of the Nib\n2 A forgotten book: The Dramatic History of India\nIllustrated \u0026amp; Edited 3 Satire Saturdays: The Leak\n4 Satire Saturdays - Crocodile: An Extraordinary Incident\n5 Satire Saturdays: Cat\u0026rsquo;s Cradle\n6 Satire Saturdays: A Case of Exploding Mangoes\n7 Satire Saturdays: The Master and Margarita","title":"BeetleBox"},{"content":"1 - Powering a battery 2 - Coarse grain model of amyloid beta proteins ","permalink":"https://yatharthb97.github.io/publications/sciencethroughvisuals_tifrh/","summary":"1 - Powering a battery 2 - Coarse grain model of amyloid beta proteins ","title":"Science Through Visuals TIFRH"},{"content":" Ⓒ Yatharth Bhasin unless explicitly stated. Scroll down for credits. 120 lines for 1 radian patch\nDense patchy particle fluid\nExtended side patch\nHeterogenous mixture fluid\nInitialization with regular packing\nOnly side patch\n","permalink":"https://yatharthb97.github.io/gallery/patchyparticles/","summary":"Ⓒ Yatharth Bhasin unless explicitly stated. Scroll down for credits. 120 lines for 1 radian patch\nDense patchy particle fluid\nExtended side patch\nHeterogenous mixture fluid\nInitialization with regular packing\nOnly side patch","title":"Patchy Particles"},{"content":"KG Lab This page summarizes the projects I worked on during my Junior Research Fellow tenure at Tata Institute of Fundamental Research, Hyderabad.\nNote: Some of the links are private links and would require special access to view. Contact yatharth1997+git@gmail.com , if you have the permission to view the links but are unable to do so.\nDIY Correlator Card The source code for the Correlator card project can be found here: https://github.com/yatharthb97/Correlator .\nTeensy 4.1 Libraries: PITController : Embedded C++ : Describes a class to control the Periodic Interrupt Timer (PIT) of a PJRC Teensy 4.1 microcontroller. PIT_LifetimeTimer : Embedded C++ : Class Interface for using the Life Time Timer functionality of the Periodic Interrupt Timer (PIT) on Teensy 4.1 microcontroller. Quadtimer lib for Gate Counting. TODO Other Software Projects Brownian dynamics simulation of free dye in an FCS setup: [langsim] https://github.com/yatharthb97/langsim . Lattice simulation of FCS - simulation on microcontroller: [NOISE] https://github.com/yatharthb97/NOISE . Serial port interface objects for controlling multiple ports: [comms] https://github.com/yatharthb97/comms . Fluorometer Code Resources that were built for the in-house fluorometer.\nLinear Stage Fluorometer [Arduino]: https://github.com/yatharthb97/LinearStageFluorometer . Fluorometer Control Layer [PC side - python]: https://github.com/yatharthb97/FluorometerControlLayer . Syringe Dispenser Control Layer [Arduino and compiler on python]: https://github.com/yatharthb97/SyringeStage3D Fluorometer PCB files: TODO Generic old code / tests / single file sketches [Arduino and C++]: https://github.com/yatharthb97/Fluorometry . fcstools python module for filtering and analysis, and plotting of Fluorescence Correlation Spectroscopy (FCS) and Fluorescence Count Rate measurements.\nRepository link [python3]: https://github.com/yatharthb97/fcstools .\nAnalysis Scripts Analysis scripts for performed experiments is hosted at[ipython]: https://github.com/yatharthb97/KGLabAnalysis .\nMiscellaneous Code [not maintained] Repository link: https://github.com/yatharthb97/KGLabMiscCode .\n","permalink":"https://yatharthb97.github.io/projects/kglab/","summary":"KG Lab This page summarizes the projects I worked on during my Junior Research Fellow tenure at Tata Institute of Fundamental Research, Hyderabad.\nNote: Some of the links are private links and would require special access to view. Contact yatharth1997+git@gmail.com , if you have the permission to view the links but are unable to do so.\nDIY Correlator Card The source code for the Correlator card project can be found here: https://github.","title":"KG Lab Project Work"},{"content":"Introduction 1 September 2022\nPoluploid: $m*n$ chromosomes. Some organisms have body parts that are polydiploid. In plants the $n$ also correlates with size of the species. Excercises on SQB. Learning R Plotting is done in some application/GUI called Quartz. Arrows can change direction semantically but systematically with attributes and pointers. Read about Mendel´s laws. \u0026ldquo;Penatrance\u0026rdquo;. ","permalink":"https://yatharthb97.github.io/classnotes/r-and-general-discussion/","summary":"Introduction 1 September 2022\nPoluploid: $m*n$ chromosomes. Some organisms have body parts that are polydiploid. In plants the $n$ also correlates with size of the species. Excercises on SQB. Learning R Plotting is done in some application/GUI called Quartz. Arrows can change direction semantically but systematically with attributes and pointers. Read about Mendel´s laws. \u0026ldquo;Penatrance\u0026rdquo;. ","title":""}]